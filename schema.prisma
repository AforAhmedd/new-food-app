generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  full_name   String?
  phone_number String?
  avatar_url  String?
  addresses   Address[]
  orders      Order[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Address {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  street      String
  city        String
  state       String
  postal_code String
  is_default  Boolean  @default(false)
  orders      Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model Restaurant {
  id           String     @id @default(cuid())
  name         String
  chainName    String
  address      String
  latitude     Float
  longitude    Float
  cuisineType  String
  segment      String
  city         String
  area         String
  rating       Float?
  coverImage   String?
  deliveryTime String?
  minimumOrder String?
  spottedDate  DateTime?
  closedDate   DateTime?
  menuItems    MenuItem[]
  orders       Order[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model MenuItem {
  id           String      @id @default(cuid())
  label        String
  description  String?
  price        Float
  image        String?
  category     String
  restaurantId String
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  orderItems   OrderItem[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([restaurantId])
}

model Order {
  id           String      @id @default(cuid())
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  restaurantId String
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  addressId    String
  address      Address     @relation(fields: [addressId], references: [id])
  status       OrderStatus @default(PENDING)
  totalAmount  Float
  items        OrderItem[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([userId])
  @@index([restaurantId])
  @@index([addressId])
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  quantity   Int
  options    Json?
  price      Float
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([orderId])
  @@index([menuItemId])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}
